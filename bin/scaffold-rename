#!/usr/bin/env ruby

gem 'byebug', platform: :mri
gem 'awesome_print', github: 'awesome-print/awesome_print'

[
  :rails,
  :byebug,
  :colorize,
  :fileutils,
  :awesome_print,
]
.each do |file|
  require file.to_s
end

$args = Hash[ ARGV.flat_map{|s| s.scan(/--?([^=\s]+)(?:=(\S+))?/) } ].map { |k, v| { "#{k.to_sym}": v.nil? ? true : v }}.reduce({}, :merge)
raise Exception.new("invalid arg") if not [$args[:from], $args[:to]].all?

def tab
  " " * 2
end

def p *strs
  puts strs.map(&:to_s).join(" ")
end

def if_demo_text
  return if not $args[:effectless] or $args[:demo_text_displayed]
  p "THIS IS A DEMO:".red, "anything you see here DIDN'T applied!".yellow
  $args[:demo_text_displayed] = true
end

def if_apply &block
  block.call() if not $args[:effectless]
end

def if_demo &block
  if_demo_text
  block.call() if $args[:effectless]
end

def str_replace file, old_text, new_text, regex: false
  file_bk = "#{file}.bk";
  if_apply do
    FileUtils.mv(file, file_bk) if $args[:backup]
    IO.write(file, File.open(file) { |f| f.read.gsub(old_text, new_text) } )
    if FileUtils.compare_file(file, file_bk)
      FileUtils.rm file 
    else
      p "@ #{file}".green
    end
  end
  if_demo do
    replaces = []
    File.foreach(file).with_index do |line, index|
      next if regex and line !~ /#{old_text}/
      next if not regex and not line.include? old_text
      replaces << ["[l:#{index}]", line.gsub(/(.*)([^\s"',\.]*)#{old_text}([^\s"',\.]*)(.*)/i, '[...] \2' + "#{old_text.yellow}" + '\3 [...]').strip, "->", line.gsub(/(.*)([^\s"',\.]*)#{old_text}([^\s"',\.]*)(.*)/, '[...] \2' + "#{new_text.green}" + '\3 [...]').strip]
    end
    if not replaces.empty?
      p "backup:".yellow, "`#{file}`", "-> `#{file_bk}`"
      p "seaching & replace:".yellow, "in `#{file}`"
      replaces.each { |r| p tab, *r }
      p
    end
  end
end

def move_file file, old_substitute, new_substitute
  if_demo do
    p "rename: ", file.gsub(old_substitute, old_substitute.yellow), "->", file.gsub(old_substitute, new_substitute.green)
  end
end

if_demo_text

# replace the origin name
folders = [ :app, :db, :config ]
pattern = "/**/*{rb,yml}"
folders.each do |folder|
  p "\n------------------------------------------------\n"
  p folder
  p

  files = Dir.glob "#{folder}#{pattern}"
  # search & replace class names
  files.each do |f|
    str_replace f, $args[:from], $args[:to]
    str_replace f, $args[:from].tableize, $args[:to].tableize
    str_replace f, $args[:from].tableize.singularize, $args[:to].tableize.singularize
    str_replace f, $args[:from].tableize.gsub("/", "_"), $args[:to].tableize.gsub("/", "_")
    str_replace f, $args[:from].tableize.gsub("/", "_").singularize, $args[:to].tableize.gsub("/", "_").singularize
  end

  files.each do |f|
    if f =~ /.*#{$args[:from].tableize.singularize}/
      move_file f, $args[:from].tableize.singularize, $args[:to].tableize.singularize
    end
  end
  # `find #{folder} -name "#{$args[:from].tableize.singularize}" -not -name ".git"` #-exec rename 's/kanaf/kalaf/' {} ";"
end